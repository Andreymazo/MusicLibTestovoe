version: "3.9"
services:
  db:
    container_name: db
    image: postgres:12.0-alpine
    # environment:
    #   - POSTGRES_USER=postgres
    #   - POSTGRES_PASSWORD=123456
    #   - POSTGRES_DB=musiclib
    volumes:
      - ./pgdata:/var/lib/postgresql/data
    env_file:
      - .env
      
    ports:
      - 5432:5432
  
  web:
    container_name: web
    build: 
      context: .
    tty: true
    ports:
     - "8000:8000"
  
    command: >
      sh -c "pip install --upgrade pip && pip install django && pip install -r requirements.txt && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  
    # ports:
    #   - 8000:8000
    env_file:
      .env
    depends_on:
      - db

# version: "3.9"
# services:
#   db:
#     image: postgres
#     environment:
#       - POSTGRES_USER=postgres
#       - POSTGRES_PASSWORD=123456
#       - POSTGRES_DB=musiclib
#     volumes:
#       - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
#       # - ./postgres.conf:/etc/postgresql/postgresql.conf
#       - database:/var/lib/postgresql/data
#     # command: postgres -c config_file=/etc/postgresql/postgresql.conf
   
#     restart: always
#     expose:
#       - 5432
#     # healthcheck:
#     #   test: ["CMD", "pg_isready", "-h", "localhost", "-p", "5432", "-d", "musiclib", "-U", "postgres"]
#     #   interval: 10s
  
#   web:
#     container_name: web
#     build: 
#       context: .
#     tty: true
#     ports:
#      - "8000:8000"
  
#     command: >
#       sh -c "pip install --upgrade pip && pip install django && pip install -r requirements.txt && python manage.py migrate && python manage.py runserver 0.0.0.0:8000"
  
#     # ports:
#     #   - 8000:8000
#     env_file:
#       .env
#     depends_on:
#       - db
# volumes:
#   database: